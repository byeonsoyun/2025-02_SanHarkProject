웹+DB 통합 프로토타입
1️⃣ 지금까지 구현 완료된 부분
백엔드

Django 프로젝트 및 앱 생성

cases 앱: 법령 및 판례 모델(LawArticle, CaseLaw) 생성 완료

DB 마이그레이션 완료 (makemigrations, migrate)

기본 데이터 모델 정의

법령: law_name, article_num, article_title, article_content, hseq

판례: case_title, court_name, judgment_date, case_number, content_summary, full_text, references

크롤링 스크립트 준비

scrape_law.py, scrape_law_selenium.py 등 스켈레톤 작성

Selenium을 이용한 로그인 + 동적 페이지 접근 시도 기록

현재까지 로그인 없는 요청이나 requests로는 법령 데이터 접근 실패 확인

프론트엔드

cases/templates/cases/search.html 존재

챗봇 페이지 뼈대 구성 가능

React 또는 Django 템플릿 기반으로 챗봇 UI 설계 가능

기타

프로젝트 디렉토리 구조 확인

Python virtual environment 사용 중

ChromeDriver/Selenium 환경 테스트 중

2️⃣ 남은 주요 구현 사항
A. 법령/판례 데이터 확보

공개 법령 접근

국가법령정보센터 공개법령 크롤링 스크립트 작성

requests + BeautifulSoup 가능

DB 저장 구조 확인

사법정보공개포털 판례

로그인 자동화 + Selenium 사용

iframe/dynamic content 기다리기 (WebDriverWait)

판례/조문 파싱 후 DB 저장

크롤링 통합

두 소스에서 확보한 데이터를 LawArticle, CaseLaw 모델로 일관되게 저장

중복 체크 및 데이터 정합성 관리

B. 챗봇 API/백엔드

질문/검색 요청 처리

사용자가 법령/판례 검색 → DB 조회

선택적 자연어 처리(NLP) 적용 가능

Django REST Framework 설정

API 엔드포인트 생성 (/api/search_law/, /api/search_case/)

JSON 반환

실시간 챗봇 응답

WebSocket 혹은 AJAX 방식 구현 가능

현재 chat 앱 존재 → consumers, routing 활용

C. 프론트엔드 챗봇 UI

입력창 + 전송 버튼 구현

검색 결과 리스트/대화형 챗 UI 구현

결과 선택 시 상세보기

법령: 조문별 상세 내용

판례: 사건 요약 + 전체 본문 보기

필요 시 React + Django REST 연동

D. 테스트 및 배포

크롤링 스크립트 정상 동작 확인

Selenium 로그인 + iframe 데이터 확인

공개법령/판례 모두 정상 DB 저장

API 테스트

Postman 등으로 endpoint 확인

UI 테스트

챗봇 대화 흐름 확인

배포

로컬 → AWS, Heroku 등

3️⃣ 단계별 구현 계획 (Step-by-Step)
단계	내용	예상 소요
1	공개 법령 크롤러 완성	1~2일
2	판례 크롤러 + 로그인 자동화(Selenium)	2~3일
3	DB 저장 및 중복 체크 통합	1일
4	Django REST API 구축 (검색/조회)	1~2일
5	챗봇 프론트엔드 구현 (UI + AJAX/WS)	2~3일
6	통합 테스트 (크롤링 → DB → 챗봇)	1~2일
7	배포 및 최종 점검	1~2일
4️⃣ 핵심 우선순위

공개법령 데이터 확보 → requests + BS4

판례 데이터 확보 → Selenium 로그인 자동화

DB 저장/조회 가능 → 챗봇 테스트 가능 상태 확보

UI/UX → 결과 확인, 사용자 편의 개선
